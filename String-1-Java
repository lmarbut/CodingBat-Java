#helloName
#Given a string name, e.g. "Bob", return a greeting of the form "Hello Bob!".
public String helloName(String name) {
  return "Hello " + name + "!";
}

#makeAbba
#Given two strings, a and b, return the result of putting them together in the order abba, e.g. "Hi" and "Bye" returns "HiByeByeHi".
public String makeAbba(String a, String b) {
  return a + b + b + a;
}

#makeTags
#The web is built with HTML strings like "<i>Yay</i>" which draws Yay as italic text. In this example, the "i" tag makes <i> and </i> which surround the word "Yay". Given tag and word strings, create the HTML string with tags around the word, e.g. "<i>Yay</i>".
public String makeTags(String tag, String word) {
  return "<" + tag + ">" + word + "</" + tag + ">";
}

#makeOutWord
#Given an "out" string length 4, such as "<<>>", and a word, return a new string where the word is in the middle of the out string, e.g. "<<word>>". 
public String makeOutWord(String out, String word) {
  String firstOut = (out.substring(0,2));
  String lastOut = (out.substring(out.length()-2,out.length()));
  
  return firstOut + word + lastOut;
}

#extraEnd
#Given a string, return a new string made of 3 copies of the last 2 chars of the original string. The string length will be at least 2.
public String extraEnd(String str) {
  String last = str.substring(str.length()-2, str.length());
  
  return last + last + last;
}

#firstTwo
#Given a string, return the string made of its first two chars, so the String "Hello" yields "He". If the string is shorter than length 2, return whatever there is, so "X" yields "X", and the empty string "" yields the empty string "".
public String firstTwo(String str) {
  if (str.length()<2){
    return str;
  }
  return (str.substring(0,2));
}

#firstHalf
#Given a string of even length, return the first half. So the string "WooHoo" yields "Woo".
public String firstHalf(String str) {
  int mid = str.length()/2;
  return (str.substring(0,mid));
}

#nonStart
#Given 2 strings, return their concatenation, except omit the first char of each. The strings will be at least length 1.
public String nonStart(String a, String b) {
  return (a.substring(1,a.length())+b.substring(1,b.length()));
}

#leftTwo
#Given a string, return a "rotated left 2" version where the first 2 chars are moved to the end. The string length will be at least 2.
public String left2(String str) {
  String first = str.substring(0,2);
  return(str.substring(2,str.length())+first);
}

#rightTwo
#Given a string, return a "rotated right 2" version where the last 2 chars are moved to the start. The string length will be at least 2.
public String right2(String str) {
  String last = (str.substring(str.length()-2,str.length()));
  return last + (str.substring(0,str.length()-2));
}

#theEnd
#Given a string, return a string length 1 from its front, unless front is false, in which case return a string length 1 from its back. The string will be non-empty.
public String theEnd(String str, boolean front) {
  if (!front){
    return str.substring(str.length()-1);
  }
  else {
    return str.substring(0, 1);
  }
}

#endsLy
#Given a string, return true if it ends in "ly".
public boolean endsLy(String str) {
  if (str.length()<2){
    return false;
  }
  if (str.substring(str.length()-2,str.length()).equals("ly")){
    return true;
  }
  return false;
}




#withoutEnd
#Given a string, return a version without both the first and last char of the string. The string may be any length, including 0.
public String withoutEnd(String str) {
  return (str.substring(1, str.length()-1));
}

#withoutEnd2
# Given a string, return a version without both the first and last char of the string. The string may be any length, including 0.
public String withouEnd2(String str) {
if (str.length()<2){
  return "";
  }
  return str.substring(1,str.length()-1);
}
